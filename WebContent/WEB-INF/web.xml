<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>ddit</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!--
     웹 애플리케이션 내 전역 활용 상수 선언
    -->
  <context-param>
        <param-name>oracleDriver</param-name>
        <param-value>oracle.jdbc.driver.OralceDriver</param-value>
  </context-param>
  <context-param>
        <param-name>oracleURL</param-name>
        <param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  </context-param>
  <context-param>
        <param-name>mysqlDriver</param-name>
        <param-value>com.mysql.jdbc.Driver</param-value>
  </context-param>
  <context-param>
        <param-name>mysqlURL</param-name>
        <param-value>jdbc:mysql://localhost:3306:DB명</param-value>
  </context-param>
  
  <!-- 
  		해당 웹 애플리케이션 내 전역적인 Exception을 처리
  			우선 순위 : 1. jsp 내 errorPage 선언과 활용
  					2. error-page 하위의 exception-type 선언과 활용
  					3. error-page 하위의 error-code 선언과 활용(일반적으로 이 방법을 이용)
   -->
   <error-page>
   		<exception-type>java.lang.ArithmeticException</exception-type>
   		<location>/error/error500.jsp</location>
   </error-page>
   
   <error-page>
   		<error-code>404</error-code>
   		<location>/error/error404.jsp</location>
   </error-page>
   <error-page>
   		<error-code>500</error-code>
   		<location>/error/error500.jsp</location>
   </error-page>
   
   <!-- 
   	  세션 유효시간(만료시간) 설정 : 분단위 설정
    -->
    <session-config>
    	<session-timeout>30</session-timeout>
    </session-config>
    
<!--     <filter>
    	<filter-name>filter1</filter-name>
    	<filter-class>kr.or.ddit.filter.Filter1</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>filter1</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
    	<filter-name>filter2</filter-name>
    	<filter-class>kr.or.ddit.filter.Filter2</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>filter2</filter-name>
    	<url-pattern>*.jsp</url-pattern>
    </filter-mapping>

    <filter>
    	<filter-name>filter3</filter-name>
    	<filter-class>kr.or.ddit.filter.Filter3</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>filter3</filter-name>
    	<url-pattern>/13/*</url-pattern>
    </filter-mapping> -->
    
    <filter>
    	<filter-name>encodingFilter</filter-name>
    	<filter-class>kr.or.ddit.filter.EncodingFilter</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>encodingFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    <filter>
    	<filter-name>ipCheckFilter</filter-name>
    	<filter-class>kr.or.ddit.filter.IPCheckFilter</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>ipCheckFilter</filter-name>
    	<url-pattern>/02/*</url-pattern>
    </filter-mapping>
    
    <filter>
    	<filter-name>fileUploadFilter</filter-name>
    	<filter-class>kr.or.ddit.filter.FileUploadFilter</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>fileUploadFilter</filter-name>
    	<url-pattern>*.jsp</url-pattern>
    </filter-mapping>
    	
    <!-- 
    	13 폴더 내 자원을 대상 : 로그인(x 로그인 안해도 접근 가능)
    					 main.jsp
    					 main.jsp?contentPage=/13/freeboard/freeboardList.jsp
    					 loginCheck.jsp
    					 main.jsp?contentPage=/13/freeboard/freeboardView.jsp
    					 
    					 로그인(O 로그인 해야 접근 가능)
    					 main.jsp?contentPage=/13/freeboard/freeboardFrom.jsp
    					 main.jsp?contentPage=/13/freeboard/insertFreeboardInfo.jsp
    					 main.jsp?contentPage=/13/freeboard/updateFreeboardInfo.jsp
    					 main.jsp?contentPage=/13/freeboard/deleteFreeboardInfo.jsp
    					 
    	필터를 활용한 로그인 검증 체크 처리.
    		filter name : loginCheckFilter
    		filter class : kr.or.ddit.filter.LoginCheckFilter
    					      클라이언트 요청 시 URI(request.getRequestURI()) 또는 
    					      서블릿 패스(request.getServletPath()) 활용
     -->
    
    <!-- 
    	리스너 : 서블릿 2.3 스팩에 최초 포함되어 웹 애플리케이션 서버(WAS, 웹 컨테이너, 서블릿 컨테이너)에서 
    	      Application(ServletContext), ServletRequest, HttpSession의 인스턴스 / GC(가비지 컬렉션),
    	            저장영역(Scope)대상 값의 저장과 삭제 갱신 시 전파되는 이벤트의 청취자를 의미. 
     -->
    
    <listener> <!-- 리스너 등록 -->
    	<listener-class>kr.or.ddit.listener.Log4jInitializeListener</listener-class>
    </listener>
    
    <listener>
    	<listener-class>kr.or.ddit.listener.CustomServletRequestListener</listener-class>
    </listener>
    
    <listener>
    	<listener-class>kr.or.ddit.listener.SessionManager</listener-class>
    </listener>
    
    <security-constraint>
    	<display-name>특정 서블릿 패스 요청 차단</display-name>
    	<web-resource-collection>
    		<web-resource-name>No Access</web-resource-name>
    		<url-pattern>/01/*</url-pattern>
    	</web-resource-collection>
    	<auth-constraint>
    		<role-name></role-name>
    	</auth-constraint>
    </security-constraint>
</web-app>